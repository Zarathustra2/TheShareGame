version: "3.4"

services:

  certbot:
    image: certbot/certbot
    restart: unless-stopped
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  nginx:
    build:
      context: ./nginx
    networks:
      - host
    ports:
      - 80:80
      - 443:443
    volumes:
      - './frontend/dist:/etc/nginx/html/'
      - './docs/build/html:/var/www/docs.thesharegame.com'
      - static_volume:/app/backend/staticfiles
      - media_volume:/app/backend/mediafiles
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    restart: always

  db:
    image: postgres
    networks:
      - host
    expose:
      - "5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/    
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"

  backend:
    build:
      context: ./backend
    networks:
      - host
    volumes:
    - static_volume:/app/backend/staticfiles
    - media_volume:/app/backend/mediafiles
    - './.fonts:/usr/share/fonts/'
    environment:
      REDIS_URL: "${REDIS_URL}"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
      POSTGRES_HOST: "${POSTGRES_HOST}"
      POSTGRES_PORT: "${POSTGRES_PORT}"
      SECRET_KEY: "${SECRET_KEY}"
      DJANGO_SENTRY_DSN: "${DJANGO_SENTRY_DSN}"
      DEBUG: "False"
      RECAPTCHA_SECRET_KEY: "${RECAPTCHA_SECRET_KEY}"
    depends_on:
      - db
      - redis
      - nginx

  redis:
    image: "redis:alpine"
    command: redis-server --appendonly yes
    networks:
      - host
    expose:
      - '6379'

  celery_beat:
    build:
      context: ./backend
    networks:
      - host
    environment:
      REDIS_URL: "${REDIS_URL}"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
      POSTGRES_HOST: "${POSTGRES_HOST}"
      POSTGRES_PORT: "${POSTGRES_PORT}"
      DJANGO_SENTRY_DSN: "${DJANGO_SENTRY_DSN}"
      DEBUG: "False"
    command: ["./wait-for-it.sh", "backend:8000", "--", "celery", "-A", "tsg", "beat", "-l", "debug"]
    depends_on:
      - redis
      - backend
      - celery_worker
      - db

  celery_worker:
    build:
      context: ./backend
    networks:
      - host
    environment:
      REDIS_URL: "${REDIS_URL}"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
      POSTGRES_HOST: "${POSTGRES_HOST}"
      POSTGRES_PORT: "${POSTGRES_PORT}"
      DJANGO_SENTRY_DSN: "${DJANGO_SENTRY_DSN}"
      DEBUG: "False"
    command: ["./wait-for-it.sh", "backend:8000", "--", "celery", "-A", "tsg", "worker", "-l", "debug"]
    depends_on:
      - redis
      - backend
      - db

  chat:
    build:
      context: ./backend/chat
    networks:
      - host
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
      POSTGRES_HOST: "${POSTGRES_HOST}"
      POSTGRES_PORT: "${POSTGRES_PORT}"
      REDIS_ADDR:  "${REDIS_ADDR}"
      GO_SENTRY_DSN: "${GO_SENTRY_DSN}"
    command: ["./wait-for-it.sh", "backend:8000", "--", "./main"]
    depends_on:
      - db
      - backend

volumes:
  postgres_data:
  static_volume:
  media_volume:

networks:
  host:
